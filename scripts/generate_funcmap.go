// +build ignore

package main

import (
	"fmt"
	"go/parser"
	"go/token"
	"go/ast"
	"io/ioutil"
)

const fileHeader = `// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL
// Use ` + "`go generate`" + ` to generate this.

package funcmap

// FuncMap is the actual function map, where the key is the name of the
// functions, and the functions are those contained in this package.
var FuncMap = map[string]interface{}{
`

func main() {
	fset := token.NewFileSet()
	pkgs, err := parser.ParseDir(fset, "./tpl/funcmap", nil, 0)
	if err != nil {
		panic(err)
	}
	var methods []string
	for _, v := range pkgs {
		for _, v := range v.Files {
			for _, dec := range v.Decls {
				d, ok := dec.(*ast.FuncDecl)
				if !ok {
					continue
				}
				fmt.Println("=>", d.Name.Name)
				methods = append(methods, d.Name.Name)
			}
		}
	}

	// file building
	f := fileHeader
	for _, m := range methods {
		f += fmt.Sprintf("\t%q: %s,\n", m, m)
	}
	f += "}\n"
	ioutil.WriteFile("tpl/funcmap/map.go", []byte(f), 0644)
}
